#!/usr/bin/env python

import sys
import getpass
import os
import re
import bz2

try:
    from bs4 import BeautifulSoup
    import requests
    global version
    version = True
except ImportError:
    print ("Install BeautifulSoup and requests module")
    sys.exit(1)

if (sys.version_info > (3,0)):
    raw_input = input
    version = False

def first_time_login():
    name = raw_input("Enter your spoj username: ")
    password = getpass.getpass()
    # When the user logins for the first time, his username and password gets stored in the file in encrypted format.
    # On next login, this username and password is retrieved from file and used.
    compressed = bz2.compress((name + ',' + password).encode('utf-8'))
    with open('.passd.txt', 'wb') as f:
        f.write(compressed)
    return name,password


def start_session(login_url, username, password):
    print ('Verifying....')
    global session
    with requests.Session() as session:
        payload = {
                'login_user' : username,
                'password' : password,
                'submit': 'login',
                }
        r = session.post(login_url, data = payload)
        html = r.text
        html.encode('utf-8')
        soup = BeautifulSoup(html, 'html.parser')

        '''Check for the authentication of the user. After the login is successful, the problems submitted by the user and the todo
              problems are stored in submitted_problems and todo_problems respectively which are a list of tuples storing in format
              (problem, problem_status_by_user_link).
        '''
        for auth in soup.find_all('h3'):
            if (auth.get_text() == 'Authentication failed!'):
                print ('Authentication Failed!')
                print ('Enter login credentials again!')
                name,p = first_time_login()
                start_session(url, name, p)
                break
        else:
            soup = return_html('http://www.spoj.com/myaccount/')
            tables = soup.find_all('table')
            global submitted_problems,todo_problems
            submitted_problems = read_problems(tables[0])
            todo_problems = read_problems(tables[1])

            read_from_user()

def login_credentials(login_url):
    if (os.path.isfile('.passd.txt')):
        with open('.passd.txt','rb') as f:
            username,password = bz2.decompress(f.read()).decode('utf-8').split(',')
    else:
        username,password = first_time_login()

    start_session(login_url, username, password)

def read_problems(table):
    # function to read all submiited problems and todo problems
    problems = []
    for row in table.find_all('tr'):
        for col in row.find_all('a'):
            problems.append((col.get_text(), col.get('href')))
    # Strip out empty tuples
    return list(filter(lambda x: x[0], problems))

def show_problems():
    while (True):
        star()

        options = { 1 : classical_problems,
                    2 : challenge_problems,
                    3 : partial_problems,
                    4 : tutorial_problems,
                    5 : riddle_problems,
                    6 : basic_problems,
                    7 : find_tags,
                    8 : read_from_user,
                    9 : sys.exit,
                }
        print ('\t\t0. Back\n\
                1. Classical\n\
                2. Challenge\n\
                3. Partial\n\
                4. Tutorial\n\
                5. Riddle\n\
                6. Basics\n\
                7. Problem by tags\n\
                8. Back\n\
                9. Exit\n')
        try:
            choice = int(raw_input('Enter your choice[1-9] : '))
            if (choice == 0):
                break
            star()
            options[choice]()
        except (ValueError, KeyError):
            print ('Wrong choice! Enter Again.')

def classical_problems():
    url1 = url + '/problems/classical/'
    pass

def challenge_problems():
    url1 = url + '/problems/challenge/'
    pass

def partial_problems():
    url1 = url + '/problems/partial/'
    pass

def tutorial_problems():
    url1 = url + '/problems/tutorial/'
    pass

def riddle_problems():
    problems_riddle = extract_problems(url + '/problems/riddle/unsolved/')
    while (True):
        display8(problems_riddle)

        choice = make_choice(len(problems_riddle))
        if (choice == 0):
            break

        open_problem(url + problems_riddle[choice - 1][-1])

def basic_problems():
    problems_basic = extract_problems(url + '/problems/basics/unsolved/')
    while (True):
        display8(problems_basic)

        choice = make_choice(len(problems_basic))
        if (choice == 0):
            break

        open_problem(url + problems_basic[choice - 1][-1])

def find_tags():
    soup = return_html(url + '/problems/tags')
    rows = soup.find('table').find('tbody').find_all('tr')

    tags = []   #tags is list of tuples in format (tag name, count of problems, tag link) that stores all tags

    for columns in rows:
        col = columns.find_all('td')
        link = col[0].find('a')
        tags.append((link.get_text(), col[1].get_text(), link.get('href')))
    tags = list(filter(lambda x: int(x[1]) > 0, tags))

    choose_tag(tags)

def choose_tag(tags):
    while (True):
        print ('{:<40}||{:^50}||{:>40}\n\n'.format('INDEX', 'TAGS', 'PROBLEMS'))
        display2(tags)
        choice = make_choice(len(tags))
        if (choice == 0):
            break

        tag_problems = extract_problems(url + tags[choice - 1][-1])
        # tag_problems store all the problems associated with the chosen tag

        while (True):
            display8(tag_problems)
            choice = make_choice(len(tag_problems))
            if (choice == 0):
                break

            open_problem(url + tag_problems[choice - 1][-1])

def make_choice(l):
    try:
        choice = int(raw_input('Enter which problem to open[1 : {}] (0 for back) : '.format(l)))
        star()
        if (choice > l):
            raise ValueError
    except ValueError:
        print ('Wrong Input!Enter Again!')
        return make_choice(l)

    return choice

def extract_problems(link):
    r = session.get(link)
    soup = BeautifulSoup(r.text.encode('utf-8'), 'html.parser')
    rows = soup.find('tbody').find_all('tr')

    problems = []
    # problems is a list of tuples in format(ID, NAME, QUALITY, USERS, IMPLEMENTATION, CONCEPT, PROBLEM_LINK)

    for row in rows:
        quality,implementation,concept = None,None,None
        columns = row.find_all('td')
        ind = columns[1].get_text().strip()
        problem_link = columns[2].find('a')
        if (columns[3].find('span')):
            quality = columns[3].find('span').get_text().strip()
        submissions = columns[4].find('a').get_text()
        accuracy = columns[5].find('a').get_text()
        difficulty = columns[6].find('div').find_all('div')
        if (len(difficulty) > 0 and difficulty[0].find('span')):
            implementation = difficulty[0].find('span').get_text()
        if (len(difficulty) > 1 and difficulty[1].find('span')):
            concept = difficulty[1].find('span').get_text()
        name = problem_link.get_text().strip()
        if (version):
            name = name.encode('utf-8')

        problems.append((ind, name, quality, submissions, accuracy, implementation, concept, problem_link.get('href')))
    return problems

def open_problem(link):
    # Function that extracts problem statement, input description ,output description and test-cases
    print ('\n\n\n\n\n')
    star()
    print ('{:^140}'.format('Problem'))
    star()
    #import webbrowser as wb
    #wb.open_new(link)
    soup = return_html(link)
    statement = soup.find("div", {"id" : "problem-body"})
    print (statement.get_text())
    star()

def return_html(link):
    r = session.get(link)
    page_text = r.text.replace('<br />', '\n')
    soup = BeautifulSoup(page_text, 'html.parser')
    return soup

def display(tup):
    for index,p in enumerate(tup):
        print ('\t\t{:<30}||{:>30}\n'.format(index+1, p[0]))
    star()

def display2(tup):
    for index,p in enumerate(tup):
        print ('{:<40}||{:^50}||{:>40}\n'.format(index+1 ,p[0] ,p[1]))
    star()

def display8(tup):
    print ('{:^10}|{:^10}|{:^55}|{:^10}|{:^15}|{:^10}|{:^20}|{:^10}\n'.format("NUMBER", "ID", "NAME", "QUALITY", "USERS", "ACCURACY", "IMPLEMENTATION", "CONCEPT"))
    for index,p in enumerate(tup):
        print ('{:^10}|{:^10}|{!s:^55s}|{!s:^10}|{!s:^15}|{!s:^10}|{!s:^20}|{!s:^10}'.format(index+1, p[0], p[1], p[2], p[3], p[4], p[5],p[6]))
    star()

def submit_solution():
    pass

def read_from_user():
    while (True):
        star()

        print ('\t\t1. Show problems\n\
                2. Submit solution\n\
                3. Show submitted problems by the user\n\
                4. Show todo problems\n\
                5. Download all solutions to submitted problems by user\n\
                6. Exit\n')
        try:
            choice = int(raw_input('Enter your choice[1-6] : '))
            star()
            if (choice == 1):
                show_problems()
            elif (choice == 2):
                submit_solution()
            elif (choice == 3):
                print ('\n\t\t{:<30}||{:>30}\n'.format("INDEX", "PROBLEM"))
                display(submitted_problems)
            elif (choice == 4):
                print ('\n\t\t{:<30}{:>30}\n'.format("INDEX", "PROBLEM"))
                display(todo_problems)
            elif (choice == 6):
                break
            else:
                raise ValueError
        except ValueError:
            print ('Wrong choice! Enter Again.')

def star():
	rows,cols = os.popen('stty size','r').read().split()
	cols = int(cols)
	print( '\n' +  '*'*cols + '\n' )
	
def main():
    global url
    url = "http://www.spoj.com"
    login_url = "http://www.spoj.com/login"
    login_credentials(login_url)


if __name__ == '__main__':
    main()
